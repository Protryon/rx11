import_ffi utf8 as type;
import_ffi pad as function;

type CompletionEvent = container {
    .pad: 1,
    sequence_number: u16,
    drawable: u32,
    minor_event: u16,
    major_event: u8,
    .pad: 1,
    shmseg: u32,
    offset: u32,
    .pad: 12,
};

type ShmErrorCode = enum u8 {
    BadSeg = 0,
};

type QueryVersionRequest = container {
};

// reserved => shared_pixmaps: bool,
type QueryVersionResponse = container {
    major_version: u16,
    minor_version: u16,
    uid: u16,
    gid: u16,
    pixmap_format: u8,
    .pad: 15,
};

type AttachRequest = container {
    shmseg: u32,
    shmid: u32,
    read_only: bool,
    .pad: 3,
};

type DetachRequest = container {
    shmseg: u32,
};

type PutImageRequest = container {
    drawable: u32,
    gcontext: u32,
    total_width: u16,
    total_height: u16,
    src_x: u16,
    src_y: u16,
    src_width: u16,
    src_height: u16,
    dst_x: i16,
    dst_y: i16,
    depth: u8,
    format: u8,
    send_event: bool,
    .pad: 1,
    shmseg: u32,
    offset: u32,
};

type GetImageRequest = container {
    drawable: u32,
    x: i16,
    y: i16,
    width: u16,
    height: u16,
    plane_mask: u32,
    format: u8,
    .pad: 3,
    shmseg: u32,
    offset: u32,
};

// reserved => depth: u8,
type GetImageResponse = container {
    visual_id: u32,
    size: u32,
};

type CreatePixmapRequest = container {
    pixmap: u32,
    drawable: u32,
    width: u16,
    height: u16,
    depth: u8,
    .pad: 3,
    shmseg: u32,
    offset: u32,
};

type AttachFdRequest = container {
    shmseg: u32,
    // fd here
    read_only: bool,
    .pad: 3,
};

type CreateSegmentRequest = container {
    shmseg: u32,
    size: u32,
    read_only: bool,
    .pad: 3,
};

// reserved => num_fd: u8,
type CreateSegmentResponse(num_fd: u8) = container {
    // fd here
    .pad: 24,
};